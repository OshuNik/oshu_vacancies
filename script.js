/* ======================================================================= */
/* 3. –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π JavaScript (script.js)                                 */
/* ======================================================================= */
const tg = window.Telegram.WebApp;
tg.expand();

const GET_API_URL = 'https://oshunik.ru/webhook/3807c00b-ec11-402e-b054-ba0b3faad50b'; 
const UPDATE_API_URL = 'https://oshunik.ru/webhook/cf41ba34-60ed-4f3d-8d13-ec85de6297e2';
// –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í—Å—Ç–∞–≤–ª—è–µ–º –≤–∞—à –Ω–æ–≤—ã–π URL
const CLEAR_CATEGORY_API_URL = 'https://oshunik.ru/webhook/d5a617c6-34db-45f2-a8a5-c88b091923d5';

const containers = {
    main: document.getElementById('vacancies-list-main'),
    maybe: document.getElementById('vacancies-list-maybe'),
    other: document.getElementById('vacancies-list-other')
};
const counts = {
    main: document.getElementById('count-main'),
    maybe: document.getElementById('count-maybe'),
    other: document.getElementById('count-other')
};
const tabButtons = document.querySelectorAll('.tab-button');
const vacancyLists = document.querySelectorAll('.vacancy-list');
const refreshBtn = document.getElementById('refresh-button');

function formatTimestamp(isoString) {
    if (!isoString) return '';
    const date = new Date(isoString);
    return date.toLocaleString('ru-RU', { 
        day: '2-digit', month: 'long', hour: '2-digit', minute: '2-digit' 
    });
}

async function updateStatus(event, vacancyId, newStatus) {
    const cardElement = document.getElementById(`card-${vacancyId}`);
    const button = event.target;
    button.disabled = true;

    try {
        await fetch(UPDATE_API_URL, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ id: vacancyId, newStatus: newStatus })
        });
        cardElement.style.transition = 'opacity 0.3s ease';
        cardElement.style.opacity = '0';
        setTimeout(() => {
            cardElement.remove();
            loadVacancies(); 
        }, 300);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
        tg.showAlert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å.');
        button.disabled = false;
    }
}

async function clearCategory(event, categoryName) {
    const button = event.target;
    
    // –î–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–ù–µ —Ç–≤–æ—ë" –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω–æ–µ –∏–º—è –≤ –¥–∏–∞–ª–æ–≥–µ
    const displayName = categoryName === '–ù–ï –¢–í–û–Å' ? '–ù–µ —Ç–≤–æ—ë' : categoryName;

    tg.showConfirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${displayName}"?`, async (isConfirmed) => {
        if (!isConfirmed) return;

        button.disabled = true;
        button.textContent = '–û—á–∏—Å—Ç–∫–∞...';

        try {
            await fetch(CLEAR_CATEGORY_API_URL, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ category: categoryName })
            });
            loadVacancies(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
            tg.showAlert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é.');
            button.disabled = false;
            button.textContent = '–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ';
        }
    });
}

function renderVacancies(container, vacancies, categoryName) {
    if (!container) return;
    container.innerHTML = ''; 
    
    if (vacancies && vacancies.length > 0) {
        const header = document.createElement('div');
        header.className = 'list-header';
        header.innerHTML = `<button class="clear-button" onclick="clearCategory(event, '${categoryName}')">–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ</button>`;
        container.appendChild(header);
    } else {
        container.innerHTML = '<p class="empty-list">–ü—É—Å—Ç–æ</p>';
        return;
    }

    for (const item of vacancies) {
        const vacancy = item.json ? item.json : item;
        if (!vacancy.id) continue;
        
        const card = document.createElement('div');
        card.className = 'vacancy-card';
        card.id = `card-${vacancy.id}`;
        
        card.innerHTML = `
            <div class="card-header">
                <h3>${vacancy.category || '‚ö†Ô∏è –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}</h3>
                <span class="timestamp">${formatTimestamp(vacancy.timestamp)}</span>
            </div>
            <p><strong>–ü—Ä–∏—á–∏–Ω–∞:</strong> ${vacancy.reason || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}</p>
            <p><strong>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:</strong> ${vacancy.keywords_found || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}</p>
            <p><strong>–ö–∞–Ω–∞–ª:</strong> ${vacancy.channel || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}</p>
            <hr>
            <details>
                <summary>–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç</summary>
                <p>${vacancy.text_highlighted || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}</p>
            </details>
            <div class="card-buttons">
                <button class="button button-primary" onclick="updateStatus(event, '${vacancy.id}', 'favorite')">‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ</button>
                <button class="button button-danger" onclick="updateStatus(event, '${vacancy.id}', 'deleted')">‚ùå –£–¥–∞–ª–∏—Ç—å</button>
            </div>
        `;
        container.appendChild(card);
    }
}

async function loadVacancies() {
    Object.values(containers).forEach(c => {
        if (c) c.innerHTML = '<p>üîÑ –ó–∞–≥—Ä—É–∑–∫–∞...</p>';
    });
    if(refreshBtn) refreshBtn.disabled = true;

    try {
        const response = await fetch(GET_API_URL + '?cache_buster=' + new Date().getTime());
        const items = await response.json();
        
        if (items && items.length > 0) {
            items.sort((a, b) => {
                const timeA = a.json ? a.json.timestamp : a.timestamp;
                const timeB = b.json ? b.json.timestamp : b.timestamp;
                return new Date(timeB) - new Date(timeA);
            });
        }
        
        const mainVacancies = [];
        const maybeVacancies = [];
        const otherVacancies = [];

        if (items && items.length > 0) {
            for (const item of items) {
                const vacancy = item.json || item;
                if (vacancy.category === '–¢–û–ß–ù–û –¢–í–û–Å') {
                    mainVacancies.push(item);
                } else if (vacancy.category === '–ú–û–ñ–ï–¢ –ë–´–¢–¨') {
                    maybeVacancies.push(item);
                } else {
                    // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ø–∞–¥–∞—é—Ç —Å—é–¥–∞
                    otherVacancies.push(item);
                }
            }
        }
        
        counts.main.textContent = `(${mainVacancies.length})`;
        counts.maybe.textContent = `(${maybeVacancies.length})`;
        counts.other.textContent = `(${otherVacancies.length})`;

        // –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞—ë–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        renderVacancies(containers.main, mainVacancies, '–¢–û–ß–ù–û –¢–í–û–Å');
        renderVacancies(containers.maybe, maybeVacancies, '–ú–û–ñ–ï–¢ –ë–´–¢–¨');
        renderVacancies(containers.other, otherVacancies, '–ù–ï –¢–í–û–Å');

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
        Object.values(containers).forEach(c => {
            if(c) c.innerHTML = `<p>–û—à–∏–±–∫–∞: ${error.message}</p>`;
        });
    } finally {
        if(refreshBtn) refreshBtn.disabled = false;
    }
}

tabButtons.forEach(button => {
    button.addEventListener('click', () => {
        tabButtons.forEach(btn => btn.classList.remove('active'));
        vacancyLists.forEach(list => list.classList.remove('active'));

        button.classList.add('active');
        const targetListId = button.dataset.target;
        document.getElementById(targetListId).classList.add('active');
    });
});

refreshBtn.addEventListener('click', loadVacancies);
loadVacancies();
