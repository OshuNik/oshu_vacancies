// settings.js ‚Äî —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
(function() {
  'use strict';

  const tg = (window.Telegram && window.Telegram.WebApp) ? window.Telegram.WebApp : null;
  if (tg && tg.expand) tg.expand();

  const CFG = window.APP_CONFIG;
  const UTIL = window.utils;

  try {
    const { config, utils } = UTIL.validateConfiguration(CFG, UTIL);
  } catch (error) {
    return;
  }

  const { uiToast, safeAlert, showCustomConfirm, createSupabaseHeaders, escapeHtml } = UTIL;

  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  const CHANNEL_VALIDATION = {
    MIN_LENGTH: 5,
    MAX_LENGTH: 32,
    PATTERN: /^[a-zA-Z0-9_]+$/
  };

  const API_ENDPOINTS = {
    SETTINGS: `${CFG.SUPABASE_URL}/rest/v1/settings`,
    CHANNELS: `${CFG.SUPABASE_URL}/rest/v1/channels`,
    DEFAULT_CHANNELS: `${CFG.SUPABASE_URL}/rest/v1/default_channels`
  };

  const MESSAGES = {
    ERRORS: {
      CHANNEL_EXISTS: '–¢–∞–∫–æ–π –∫–∞–Ω–∞–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ!',
      INVALID_FORMAT: `–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç username. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è (${CHANNEL_VALIDATION.MIN_LENGTH}-${CHANNEL_VALIDATION.MAX_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤).`,
      ADD_FAILED: '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª',
      LOAD_FAILED: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–Ω–∞–ª—ã',
      DELETE_FAILED: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª',
      UPDATE_FAILED: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å'
    },
    SUCCESS: {
      CHANNEL_ADDED: '–ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!',
      CHANNEL_DELETED: '–ö–∞–Ω–∞–ª —É–¥–∞–ª—ë–Ω',
      CHANNEL_TOGGLED: '–ö–∞–Ω–∞–ª –≤–∫–ª—é—á—ë–Ω',
      CHANNEL_DISABLED: '–ö–∞–Ω–∞–ª –≤—ã–∫–ª—é—á–µ–Ω',
      KEYWORDS_SAVED: '–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã',
      DEFAULTS_LOADED: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã.',
      ALL_DELETED: '–í—Å–µ –∫–∞–Ω–∞–ª—ã —É–¥–∞–ª–µ–Ω—ã.'
    }
  };

  const settingsTabButtons = document.querySelectorAll('.settings-tab-button');
  const settingsTabContents = document.querySelectorAll('.settings-tab-content');
  const keywordsInput = document.getElementById('keywords-input');
  const excludeKeywordsInput = document.getElementById('exclude-keywords-input');
  const saveKeywordsBtn = document.getElementById('save-keywords-btn');
  const saveExcludeKeywordsBtn = document.getElementById('save-exclude-keywords-btn');
  const addChannelBtn = document.getElementById('add-channel-btn');
  const channelInput = document.getElementById('channel-id-input');
  const channelsListContainer = document.getElementById('channels-list');
  const exportDataBtn = document.getElementById('export-data-btn');
  const importDataBtn = document.getElementById('import-data-btn');
  const clearDataBtn = document.getElementById('clear-data-btn');
  const notificationsEnabled = document.getElementById('notifications-enabled');
  const notificationInterval = document.getElementById('notification-interval');
  const saveNotificationSettingsBtn = document.getElementById('save-notification-settings-btn');

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ç–∞–±—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
   */
  function switchTab(tabName) {
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö —Ç–∞–±–æ–≤ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    settingsTabButtons.forEach(btn => btn.classList.remove('active'));
    settingsTabContents.forEach(content => content.classList.remove('active'));
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–π —Ç–∞–± –∏ –∫–æ–Ω—Ç–µ–Ω—Ç
    const activeTab = document.querySelector(`[data-tab="${tabName}"]`);
    const activeContent = document.getElementById(`${tabName}-tab`);
    
    if (activeTab) activeTab.classList.add('active');
    if (activeContent) activeContent.classList.add('active');
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç ID –∫–∞–Ω–∞–ª–∞
   * @param {string} input - –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ (username, t.me —Å—Å—ã–ª–∫–∞ –∏–ª–∏ @username)
   * @returns {string|null} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π channelId –∏–ª–∏ null –ø—Ä–∏ –æ—à–∏–±–∫–µ
   */
  function validateAndFormatChannelId(input) {
    if (!input) return null;
    
    let channelId = input.trim();
            utils.safeLog.log('üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞:', channelId);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ t.me —Å—Å—ã–ª–æ–∫
    if (channelId.includes('t.me/')) {
      channelId = '@' + channelId.split('t.me/')[1].split('/')[0];
              utils.safeLog.log('üîó –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –∏–∑ t.me:', channelId);
    }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ @ –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    if (!channelId.startsWith('@')) channelId = '@' + channelId;
    
            utils.safeLog.log('‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π channelId:', channelId);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è username
    const username = channelId.substring(1);
    if (!CHANNEL_VALIDATION.PATTERN.test(username) || 
        username.length < CHANNEL_VALIDATION.MIN_LENGTH || 
        username.length > CHANNEL_VALIDATION.MAX_LENGTH) {
      safeAlert(MESSAGES.ERRORS.INVALID_FORMAT);
      return null;
    }
    
    return channelId;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   * @param {string} channelId - ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
   * @returns {Promise<boolean>} true –µ—Å–ª–∏ –∫–∞–Ω–∞–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, false –µ—Å–ª–∏ –Ω–µ—Ç
   */
  async function isChannelExists(channelId) {
            utils.safeLog.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞...');
    try {
      const response = await fetch(`${API_ENDPOINTS.CHANNELS}?channel_id=eq.${encodeURIComponent(channelId)}&select=id`, {
        headers: createSupabaseHeaders()
      });
      
      if (response.ok) {
        const existingChannels = await response.json();
        utils.safeLog.log('üìä –ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞–Ω–∞–ª–æ–≤:', existingChannels.length);
        return existingChannels.length > 0;
      } else {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:', response.status, response.statusText);
        return false;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞:', error);
      return false;
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –µ–≥–æ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
   * @param {string} channelId - ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
   * @returns {Promise<Object>} –°–æ–∑–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –∫–∞–Ω–∞–ª–∞
   */
  async function createChannel(channelId) {
    const newChannelData = { 
      channel_id: channelId, 
      channel_title: channelId, 
      is_enabled: true 
    };
    
            utils.safeLog.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ API:', newChannelData);
        utils.safeLog.log('üåê URL:', API_ENDPOINTS.CHANNELS);
    
    const response = await fetch(API_ENDPOINTS.CHANNELS, {
      method: 'POST',
      headers: createSupabaseHeaders({ prefer: 'return=representation' }),
      body: JSON.stringify(newChannelData)
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`–û—à–∏–±–∫–∞ API: ${response.status} ${response.statusText}. ${errorText}`);
    }
    
    const data = await response.json();
    if (data && data.length > 0) {
      renderChannel(data[0]);
      channelInput.value = '';
      uiToast(MESSAGES.SUCCESS.CHANNEL_ADDED);
      return data[0];
    } else {
      throw new Error('API –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ');
    }
  }

  settingsTabButtons.forEach(button => {
    button.addEventListener('click', () => {
      settingsTabButtons.forEach(btn => btn.classList.remove('active'));
      settingsTabContents.forEach(content => content.classList.remove('active'));
      button.classList.add('active');
      const targetContent = document.getElementById(button.dataset.target);
      if (targetContent) targetContent.classList.add('active');
    });
  });

  async function loadKeywords() {
    if (!keywordsDisplay) {
        console.error('loadKeywords: —ç–ª–µ–º–µ–Ω—Ç keywordsDisplay –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    saveBtn.disabled = true;
    keywordsDisplay.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞...';
    try {
      const response = await fetch(`${API_ENDPOINTS.SETTINGS}?select=keywords`, {
        headers: createSupabaseHeaders()
      });
      if (!response.ok) throw new Error('Network response was not ok');
      const data = await response.json();
      const keywords = data.length > 0 ? data[0].keywords : '';
      keywordsInput.value = keywords;
      keywordsDisplay.textContent = keywords || '-- –Ω–µ –∑–∞–¥–∞–Ω—ã --';
    } catch (error) {
      console.error('loadKeywords: –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', error);
      keywordsDisplay.textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏';
    } finally {
      saveBtn.disabled = false;
    }
  }

  async function saveKeywords() {
    if (!keywordsInput) return;
    const kws = keywordsInput.value.trim();
    saveBtn.disabled = true;
    try {
      await fetch(API_ENDPOINTS.SETTINGS, {
        method: 'POST',
        headers: createSupabaseHeaders({ prefer: 'resolution=merge-duplicates' }),
        body: JSON.stringify({ update_key: 1, keywords: kws })
      });
      keywordsDisplay.textContent = kws || '-- –Ω–µ –∑–∞–¥–∞–Ω—ã --';
      uiToast(MESSAGES.SUCCESS.KEYWORDS_SAVED);
    } catch (error) {
      console.error('saveKeywords: –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', error);
      safeAlert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.');
    } finally {
      saveBtn.disabled = false;
    }
  }

  function renderChannel(channel) {
    const channelItem = document.createElement('div');
    channelItem.className = 'channel-item';
    channelItem.dataset.dbId = channel.id;
    
    const infoDiv = document.createElement('div');
    infoDiv.className = 'channel-item-info';
    
    const cleanId = channel.channel_id.replace('@', '');
    const titleSpan = document.createElement('span');
    titleSpan.className = 'channel-item-title';
    // –°–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    titleSpan.textContent = escapeHtml(channel.channel_title || cleanId);
    
    const idLink = document.createElement('a');
    idLink.className = 'channel-item-id';
    idLink.textContent = `@${cleanId}`;
    idLink.href = `https://t.me/${cleanId}`;
    idLink.target = '_blank';
    idLink.rel = 'noopener noreferrer';
    const toggleContainer = document.createElement('div');
    toggleContainer.className = 'channel-item-toggle';
    const toggleLabel = document.createElement('label');
    toggleLabel.className = 'toggle-switch';
    const toggleInput = document.createElement('input');
    toggleInput.type = 'checkbox';
    toggleInput.checked = channel.is_enabled;
    const toggleSlider = document.createElement('span');
    toggleSlider.className = 'toggle-slider';
    const deleteButton = document.createElement('button');
    deleteButton.className = 'channel-item-delete';
            utils.setSafeHTML(deleteButton, `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>`);
    // –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ cleanup
          const deleteHandler = async () => {
        const dbId = channelItem.dataset.dbId;
        if (!dbId) return;
        const ok = await showCustomConfirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª?');
        if (!ok) return;
        channelItem.style.opacity = '0.5';
        try {
          const response = await fetch(`${API_ENDPOINTS.CHANNELS}?id=eq.${dbId}`, {
            method: 'DELETE',
            headers: createSupabaseHeaders()
          });
          if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ç–∏');
          channelItem.remove();
          uiToast(MESSAGES.SUCCESS.CHANNEL_DELETED);
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞:', error);
          safeAlert(MESSAGES.ERRORS.DELETE_FAILED);
          channelItem.style.opacity = '1';
        }
      };
    
          const toggleHandler = async (event) => {
        const dbId = channelItem.dataset.dbId;
        const is_enabled = event.target.checked;
        if (!dbId) return;
        try {
          const response = await fetch(`${API_ENDPOINTS.CHANNELS}?id=eq.${dbId}`, {
            method: 'PATCH',
            headers: createSupabaseHeaders(),
            body: JSON.stringify({ is_enabled: is_enabled })
          });
          if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ç–∏');
          uiToast(is_enabled ? MESSAGES.SUCCESS.CHANNEL_TOGGLED : MESSAGES.SUCCESS.CHANNEL_DISABLED);
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–Ω–∞–ª–∞:', error);
          safeAlert(MESSAGES.ERRORS.UPDATE_FAILED);
          event.target.checked = !is_enabled;
        }
      };
    
    deleteButton.addEventListener('click', deleteHandler);
    toggleInput.addEventListener('change', toggleHandler);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º cleanup —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–µ
    channelItem.cleanup = () => {
      deleteButton.removeEventListener('click', deleteHandler);
      toggleInput.removeEventListener('change', toggleHandler);
    };
    infoDiv.append(titleSpan, idLink);
    toggleLabel.append(toggleInput, toggleSlider);
    toggleContainer.append(toggleLabel);
    channelItem.append(infoDiv, toggleContainer, deleteButton);
    const emptyListMessage = channelsListContainer.querySelector('.empty-list');
    if (emptyListMessage) emptyListMessage.remove();
    channelsListContainer.appendChild(channelItem);
  }
  
  async function addChannel() {
    const channelId = validateAndFormatChannelId(channelInput.value);
    if (!channelId) return;
    
    addChannelBtn.disabled = true;
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
      if (await isChannelExists(channelId)) {
        safeAlert(MESSAGES.ERRORS.CHANNEL_EXISTS);
        return;
      }
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª
      await createChannel(channelId);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞:', error);
      safeAlert(`${MESSAGES.ERRORS.ADD_FAILED}: ${error.message}`);
    } finally {
      addChannelBtn.disabled = false;
    }
  }

  async function loadChannels() {
    if (!channelsListContainer) {
        console.error('loadChannels: —ç–ª–µ–º–µ–Ω—Ç channelsListContainer –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
            utils.setSafeHTML(channelsListContainer, '<p class="empty-list">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–Ω–∞–ª–æ–≤...</p>');
    try {
      const response = await fetch(`${API_ENDPOINTS.CHANNELS}?select=*`, {
        headers: createSupabaseHeaders()
      });
      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
      const data = await response.json();
              utils.clearElement(channelsListContainer);
      if (data && data.length > 0) {
          data.forEach(item => renderChannel(item));
      } else {
          utils.setSafeHTML(channelsListContainer, '<p class="empty-list">-- –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç --</p>');
      }
    } catch (error) {
      console.error('loadChannels: –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', error);
              utils.setSafeHTML(channelsListContainer, '<p class="empty-list">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–Ω–∞–ª—ã.</p>');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ç–∞–±–æ–≤
  settingsTabButtons.forEach(btn => {
    btn.addEventListener('click', () => {
      const tabName = btn.dataset.tab;
      if (tabName) {
        switchTab(tabName);
      }
    });
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
  addChannelBtn?.addEventListener('click', addChannel);
  saveKeywordsBtn?.addEventListener('click', saveKeywords);
  saveExcludeKeywordsBtn?.addEventListener('click', saveExcludeKeywords);
  saveNotificationSettingsBtn?.addEventListener('click', saveNotificationSettings);
  exportDataBtn?.addEventListener('click', exportData);
  importDataBtn?.addEventListener('click', importData);
  clearDataBtn?.addEventListener('click', clearAllData);



  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
  async function saveKeywords() {
    if (!keywordsInput) return;
    const keywords = keywordsInput.value.trim();
    try {
      localStorage.setItem('search-keywords', keywords);
      uiToast('–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    } catch (error) {
      safeAlert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞');
    }
  }

  async function saveExcludeKeywords() {
    if (!excludeKeywordsInput) return;
    const excludeKeywords = excludeKeywordsInput.value.trim();
    try {
      localStorage.setItem('exclude-keywords', excludeKeywords);
      uiToast('–°–ª–æ–≤–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    } catch (error) {
      safeAlert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ª–æ–≤–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è');
    }
  }

  async function saveNotificationSettings() {
    if (!notificationsEnabled || !notificationInterval) return;
    try {
      localStorage.setItem('notifications-enabled', notificationsEnabled.checked);
      localStorage.setItem('notification-interval', notificationInterval.value);
      uiToast('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    } catch (error) {
      safeAlert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
    }
  }

  async function exportData() {
    try {
      const data = {
        keywords: localStorage.getItem('search-keywords') || '',
        excludeKeywords: localStorage.getItem('exclude-keywords') || '',
        notificationsEnabled: localStorage.getItem('notifications-enabled') || 'false',
        notificationInterval: localStorage.getItem('notification-interval') || '10'
      };
      
      const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'oshu-work-settings.json';
      a.click();
      URL.revokeObjectURL(url);
      
      uiToast('–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
    } catch (error) {
      safeAlert('–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ');
    }
  }

  async function importData() {
    try {
      const input = document.createElement('input');
      input.type = 'file';
      input.accept = '.json';
      input.onchange = async (e) => {
        const file = e.target.files[0];
        if (!file) return;
        
        const text = await file.text();
        const data = JSON.parse(text);
        
        if (data.keywords !== undefined) localStorage.setItem('search-keywords', data.keywords);
        if (data.excludeKeywords !== undefined) localStorage.setItem('exclude-keywords', data.excludeKeywords);
        if (data.notificationsEnabled !== undefined) localStorage.setItem('notifications-enabled', data.notificationsEnabled);
        if (data.notificationInterval !== undefined) localStorage.setItem('notification-interval', data.notificationInterval);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        loadKeywords();
        loadNotificationSettings();
        
        uiToast('–î–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
      };
      input.click();
    } catch (error) {
      safeAlert('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ');
    }
  }

  async function clearAllData() {
    const message = '–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.';
    const isConfirmed = await showCustomConfirm(message);
    if (!isConfirmed) return;
    
    try {
      localStorage.clear();
      uiToast('–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º UI
      loadKeywords();
      loadNotificationSettings();
    } catch (error) {
      safeAlert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
  function loadKeywords() {
    if (keywordsInput) {
      keywordsInput.value = localStorage.getItem('search-keywords') || '';
    }
    if (excludeKeywordsInput) {
      excludeKeywordsInput.value = localStorage.getItem('exclude-keywords') || '';
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  function loadNotificationSettings() {
    if (notificationsEnabled) {
      notificationsEnabled.checked = localStorage.getItem('notifications-enabled') === 'true';
    }
    if (notificationInterval) {
      notificationInterval.value = localStorage.getItem('notification-interval') || '10';
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  loadKeywords();
  loadChannels();
  loadNotificationSettings();
})();
